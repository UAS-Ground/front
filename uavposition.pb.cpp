// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uavposition.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uavposition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uavccsds {
class PositionReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PositionReport> {
} _PositionReport_default_instance_;

namespace protobuf_uavposition_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionReport, roll_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PositionReport)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PositionReport_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "uavposition.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PositionReport_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PositionReport_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021uavposition.proto\022\010uavccsds\"\273\001\n\016Positi"
      "onReport\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001("
      "\002\022\020\n\010latitude\030\004 \001(\002\022\021\n\tlongitude\030\005 \001(\002\022\020"
      "\n\010altitude\030\006 \001(\002\022\r\n\005pitch\030\007 \001(\002\022\013\n\003yaw\030\010"
      " \001(\002\022\014\n\004roll\030\t \001(\002\"\'\n\021PositionDimension\022"
      "\007\n\003TWO\020\000\022\t\n\005THREE\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uavposition.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_uavposition_2eproto

const ::google::protobuf::EnumDescriptor* PositionReport_PositionDimension_descriptor() {
  protobuf_uavposition_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavposition_2eproto::file_level_enum_descriptors[0];
}
bool PositionReport_PositionDimension_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PositionReport_PositionDimension PositionReport::TWO;
const PositionReport_PositionDimension PositionReport::THREE;
const PositionReport_PositionDimension PositionReport::PositionDimension_MIN;
const PositionReport_PositionDimension PositionReport::PositionDimension_MAX;
const int PositionReport::PositionDimension_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionReport::kXFieldNumber;
const int PositionReport::kYFieldNumber;
const int PositionReport::kZFieldNumber;
const int PositionReport::kLatitudeFieldNumber;
const int PositionReport::kLongitudeFieldNumber;
const int PositionReport::kAltitudeFieldNumber;
const int PositionReport::kPitchFieldNumber;
const int PositionReport::kYawFieldNumber;
const int PositionReport::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionReport::PositionReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_uavposition_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavccsds.PositionReport)
}
PositionReport::PositionReport(const PositionReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&x_) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:uavccsds.PositionReport)
}

void PositionReport::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&x_) + sizeof(roll_));
  _cached_size_ = 0;
}

PositionReport::~PositionReport() {
  // @@protoc_insertion_point(destructor:uavccsds.PositionReport)
  SharedDtor();
}

void PositionReport::SharedDtor() {
}

void PositionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionReport::descriptor() {
  protobuf_uavposition_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavposition_2eproto::file_level_metadata[0].descriptor;
}

const PositionReport& PositionReport::default_instance() {
  protobuf_uavposition_2eproto::InitDefaults();
  return *internal_default_instance();
}

PositionReport* PositionReport::New(::google::protobuf::Arena* arena) const {
  PositionReport* n = new PositionReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionReport::Clear() {
// @@protoc_insertion_point(message_clear_start:uavccsds.PositionReport)
  ::memset(&x_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&x_) + sizeof(roll_));
}

bool PositionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavccsds.PositionReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavccsds.PositionReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavccsds.PositionReport)
  return false;
#undef DO_
}

void PositionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavccsds.PositionReport)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // float longitude = 5;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->longitude(), output);
  }

  // float altitude = 6;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->altitude(), output);
  }

  // float pitch = 7;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pitch(), output);
  }

  // float yaw = 8;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yaw(), output);
  }

  // float roll = 9;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->roll(), output);
  }

  // @@protoc_insertion_point(serialize_end:uavccsds.PositionReport)
}

::google::protobuf::uint8* PositionReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uavccsds.PositionReport)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // float longitude = 5;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->longitude(), target);
  }

  // float altitude = 6;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->altitude(), target);
  }

  // float pitch = 7;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pitch(), target);
  }

  // float yaw = 8;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yaw(), target);
  }

  // float roll = 9;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->roll(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uavccsds.PositionReport)
  return target;
}

size_t PositionReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uavccsds.PositionReport)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 4;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 5;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 6;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 7;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 8;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 9;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uavccsds.PositionReport)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uavccsds.PositionReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uavccsds.PositionReport)
    MergeFrom(*source);
  }
}

void PositionReport::MergeFrom(const PositionReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uavccsds.PositionReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void PositionReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uavccsds.PositionReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionReport::CopyFrom(const PositionReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uavccsds.PositionReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionReport::IsInitialized() const {
  return true;
}

void PositionReport::Swap(PositionReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionReport::InternalSwap(PositionReport* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(roll_, other->roll_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionReport::GetMetadata() const {
  protobuf_uavposition_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavposition_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionReport

// float x = 1;
void PositionReport::clear_x() {
  x_ = 0;
}
float PositionReport::x() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.x)
  return x_;
}
void PositionReport::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.x)
}

// float y = 2;
void PositionReport::clear_y() {
  y_ = 0;
}
float PositionReport::y() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.y)
  return y_;
}
void PositionReport::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.y)
}

// float z = 3;
void PositionReport::clear_z() {
  z_ = 0;
}
float PositionReport::z() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.z)
  return z_;
}
void PositionReport::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.z)
}

// float latitude = 4;
void PositionReport::clear_latitude() {
  latitude_ = 0;
}
float PositionReport::latitude() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.latitude)
  return latitude_;
}
void PositionReport::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.latitude)
}

// float longitude = 5;
void PositionReport::clear_longitude() {
  longitude_ = 0;
}
float PositionReport::longitude() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.longitude)
  return longitude_;
}
void PositionReport::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.longitude)
}

// float altitude = 6;
void PositionReport::clear_altitude() {
  altitude_ = 0;
}
float PositionReport::altitude() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.altitude)
  return altitude_;
}
void PositionReport::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.altitude)
}

// float pitch = 7;
void PositionReport::clear_pitch() {
  pitch_ = 0;
}
float PositionReport::pitch() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.pitch)
  return pitch_;
}
void PositionReport::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.pitch)
}

// float yaw = 8;
void PositionReport::clear_yaw() {
  yaw_ = 0;
}
float PositionReport::yaw() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.yaw)
  return yaw_;
}
void PositionReport::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.yaw)
}

// float roll = 9;
void PositionReport::clear_roll() {
  roll_ = 0;
}
float PositionReport::roll() const {
  // @@protoc_insertion_point(field_get:uavccsds.PositionReport.roll)
  return roll_;
}
void PositionReport::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.PositionReport.roll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace uavccsds

// @@protoc_insertion_point(global_scope)
