// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uavcommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uavcommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uavccsds {
class VelocityCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VelocityCommand> {
} _VelocityCommand_default_instance_;

namespace protobuf_uavcommand_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, linear_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, linear_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, linear_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, angular_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, angular_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityCommand, angular_z_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(VelocityCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VelocityCommand_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "uavcommand.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _VelocityCommand_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VelocityCommand_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020uavcommand.proto\022\010uavccsds\"\250\001\n\017Velocit"
      "yCommand\022\020\n\010linear_x\030\001 \001(\002\022\020\n\010linear_y\030\002"
      " \001(\002\022\020\n\010linear_z\030\003 \001(\002\022\021\n\tangular_x\030\004 \001("
      "\002\022\021\n\tangular_y\030\005 \001(\002\022\021\n\tangular_z\030\006 \001(\002\""
      "&\n\020CommandDimension\022\007\n\003TWO\020\000\022\t\n\005THREE\020\001b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uavcommand.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_uavcommand_2eproto

const ::google::protobuf::EnumDescriptor* VelocityCommand_CommandDimension_descriptor() {
  protobuf_uavcommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavcommand_2eproto::file_level_enum_descriptors[0];
}
bool VelocityCommand_CommandDimension_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VelocityCommand_CommandDimension VelocityCommand::TWO;
const VelocityCommand_CommandDimension VelocityCommand::THREE;
const VelocityCommand_CommandDimension VelocityCommand::CommandDimension_MIN;
const VelocityCommand_CommandDimension VelocityCommand::CommandDimension_MAX;
const int VelocityCommand::CommandDimension_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VelocityCommand::kLinearXFieldNumber;
const int VelocityCommand::kLinearYFieldNumber;
const int VelocityCommand::kLinearZFieldNumber;
const int VelocityCommand::kAngularXFieldNumber;
const int VelocityCommand::kAngularYFieldNumber;
const int VelocityCommand::kAngularZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VelocityCommand::VelocityCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_uavcommand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavccsds.VelocityCommand)
}
VelocityCommand::VelocityCommand(const VelocityCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_x_, &from.linear_x_,
    reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&linear_x_) + sizeof(angular_z_));
  // @@protoc_insertion_point(copy_constructor:uavccsds.VelocityCommand)
}

void VelocityCommand::SharedCtor() {
  ::memset(&linear_x_, 0, reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&linear_x_) + sizeof(angular_z_));
  _cached_size_ = 0;
}

VelocityCommand::~VelocityCommand() {
  // @@protoc_insertion_point(destructor:uavccsds.VelocityCommand)
  SharedDtor();
}

void VelocityCommand::SharedDtor() {
}

void VelocityCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VelocityCommand::descriptor() {
  protobuf_uavcommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavcommand_2eproto::file_level_metadata[0].descriptor;
}

const VelocityCommand& VelocityCommand::default_instance() {
  protobuf_uavcommand_2eproto::InitDefaults();
  return *internal_default_instance();
}

VelocityCommand* VelocityCommand::New(::google::protobuf::Arena* arena) const {
  VelocityCommand* n = new VelocityCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VelocityCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:uavccsds.VelocityCommand)
  ::memset(&linear_x_, 0, reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&linear_x_) + sizeof(angular_z_));
}

bool VelocityCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavccsds.VelocityCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float linear_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float linear_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float linear_z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_x = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_y = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_z = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavccsds.VelocityCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavccsds.VelocityCommand)
  return false;
#undef DO_
}

void VelocityCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavccsds.VelocityCommand)
  // float linear_x = 1;
  if (this->linear_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->linear_x(), output);
  }

  // float linear_y = 2;
  if (this->linear_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->linear_y(), output);
  }

  // float linear_z = 3;
  if (this->linear_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->linear_z(), output);
  }

  // float angular_x = 4;
  if (this->angular_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angular_x(), output);
  }

  // float angular_y = 5;
  if (this->angular_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angular_y(), output);
  }

  // float angular_z = 6;
  if (this->angular_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angular_z(), output);
  }

  // @@protoc_insertion_point(serialize_end:uavccsds.VelocityCommand)
}

::google::protobuf::uint8* VelocityCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uavccsds.VelocityCommand)
  // float linear_x = 1;
  if (this->linear_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->linear_x(), target);
  }

  // float linear_y = 2;
  if (this->linear_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->linear_y(), target);
  }

  // float linear_z = 3;
  if (this->linear_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->linear_z(), target);
  }

  // float angular_x = 4;
  if (this->angular_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angular_x(), target);
  }

  // float angular_y = 5;
  if (this->angular_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angular_y(), target);
  }

  // float angular_z = 6;
  if (this->angular_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angular_z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uavccsds.VelocityCommand)
  return target;
}

size_t VelocityCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uavccsds.VelocityCommand)
  size_t total_size = 0;

  // float linear_x = 1;
  if (this->linear_x() != 0) {
    total_size += 1 + 4;
  }

  // float linear_y = 2;
  if (this->linear_y() != 0) {
    total_size += 1 + 4;
  }

  // float linear_z = 3;
  if (this->linear_z() != 0) {
    total_size += 1 + 4;
  }

  // float angular_x = 4;
  if (this->angular_x() != 0) {
    total_size += 1 + 4;
  }

  // float angular_y = 5;
  if (this->angular_y() != 0) {
    total_size += 1 + 4;
  }

  // float angular_z = 6;
  if (this->angular_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VelocityCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uavccsds.VelocityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VelocityCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uavccsds.VelocityCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uavccsds.VelocityCommand)
    MergeFrom(*source);
  }
}

void VelocityCommand::MergeFrom(const VelocityCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uavccsds.VelocityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.linear_x() != 0) {
    set_linear_x(from.linear_x());
  }
  if (from.linear_y() != 0) {
    set_linear_y(from.linear_y());
  }
  if (from.linear_z() != 0) {
    set_linear_z(from.linear_z());
  }
  if (from.angular_x() != 0) {
    set_angular_x(from.angular_x());
  }
  if (from.angular_y() != 0) {
    set_angular_y(from.angular_y());
  }
  if (from.angular_z() != 0) {
    set_angular_z(from.angular_z());
  }
}

void VelocityCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uavccsds.VelocityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityCommand::CopyFrom(const VelocityCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uavccsds.VelocityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityCommand::IsInitialized() const {
  return true;
}

void VelocityCommand::Swap(VelocityCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VelocityCommand::InternalSwap(VelocityCommand* other) {
  std::swap(linear_x_, other->linear_x_);
  std::swap(linear_y_, other->linear_y_);
  std::swap(linear_z_, other->linear_z_);
  std::swap(angular_x_, other->angular_x_);
  std::swap(angular_y_, other->angular_y_);
  std::swap(angular_z_, other->angular_z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VelocityCommand::GetMetadata() const {
  protobuf_uavcommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavcommand_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VelocityCommand

// float linear_x = 1;
void VelocityCommand::clear_linear_x() {
  linear_x_ = 0;
}
float VelocityCommand::linear_x() const {
  // @@protoc_insertion_point(field_get:uavccsds.VelocityCommand.linear_x)
  return linear_x_;
}
void VelocityCommand::set_linear_x(float value) {
  
  linear_x_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.VelocityCommand.linear_x)
}

// float linear_y = 2;
void VelocityCommand::clear_linear_y() {
  linear_y_ = 0;
}
float VelocityCommand::linear_y() const {
  // @@protoc_insertion_point(field_get:uavccsds.VelocityCommand.linear_y)
  return linear_y_;
}
void VelocityCommand::set_linear_y(float value) {
  
  linear_y_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.VelocityCommand.linear_y)
}

// float linear_z = 3;
void VelocityCommand::clear_linear_z() {
  linear_z_ = 0;
}
float VelocityCommand::linear_z() const {
  // @@protoc_insertion_point(field_get:uavccsds.VelocityCommand.linear_z)
  return linear_z_;
}
void VelocityCommand::set_linear_z(float value) {
  
  linear_z_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.VelocityCommand.linear_z)
}

// float angular_x = 4;
void VelocityCommand::clear_angular_x() {
  angular_x_ = 0;
}
float VelocityCommand::angular_x() const {
  // @@protoc_insertion_point(field_get:uavccsds.VelocityCommand.angular_x)
  return angular_x_;
}
void VelocityCommand::set_angular_x(float value) {
  
  angular_x_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.VelocityCommand.angular_x)
}

// float angular_y = 5;
void VelocityCommand::clear_angular_y() {
  angular_y_ = 0;
}
float VelocityCommand::angular_y() const {
  // @@protoc_insertion_point(field_get:uavccsds.VelocityCommand.angular_y)
  return angular_y_;
}
void VelocityCommand::set_angular_y(float value) {
  
  angular_y_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.VelocityCommand.angular_y)
}

// float angular_z = 6;
void VelocityCommand::clear_angular_z() {
  angular_z_ = 0;
}
float VelocityCommand::angular_z() const {
  // @@protoc_insertion_point(field_get:uavccsds.VelocityCommand.angular_z)
  return angular_z_;
}
void VelocityCommand::set_angular_z(float value) {
  
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:uavccsds.VelocityCommand.angular_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace uavccsds

// @@protoc_insertion_point(global_scope)
